pipeline {
   /*
    .Description
        jenkins file to provide the pipeline to create snapshots
    .Parameter VirtualMachineName (VMS)
        A SearchPattern to filter machines
        if empty all machines will be addressed
    .Parameter Snapshot Name (snapshotname)
        A text string to name the new snapshot
        if empty a generic name will be generated
    .Parameter Cleanup old snapshots (RUNMODE)
        A flag to enable removal of old snapshots before creating new ones
        Attention: ALL snapshots will be removed if multiple exist
    .Parameter Verbose output (verbose)
        activates verbose output during processing
    .Parameter Execute me (EXECUTEME)
        a securitiy flag to prevent accidental execution
        can also be used to load changes in the jenkinsfile after push
    .OUTPUT
        All output is parsed to the Jenkins Log / Output as plain text       
    */
    agent {label "DERDAPP006"}
    options {
        durabilityHint 'MAX_SURVIVABILITY'
        disableConcurrentBuilds()
        disableResume()
    }
    stages {
        stage ('getsnapshots') {
            steps {
                script {
                    properties([
                        parameters([
                            string(description: 'VirtualMachineName', defaultValue: '', name: 'VMS', trim: true),
                            string(description: 'Snapshot Name', defaultValue: '', name: 'snapshotname', trim: true),
                            [$class: 'ChoiceParameter', 
                                choiceType: 'PT_RADIO', 
                                description: 'Cleanup old snapshots', 
                                filterLength: 1, 
                                filterable: false, 
                                name: 'RUNMODE', 
                                script: [
                                    $class: 'GroovyScript', 
                                    fallbackScript: [
                                    classpath: [], 
                                    sandbox: true, 
                                    script: 
                                        "return['ERROR: Could not get RunMode']"
                                    ], 
                                    script: [
                                    classpath: [], 
                                    sandbox: true, 
                                    script: 
                                        "return['Yes:selected','No']"
                                    ]
                                ]
                            ],
                            [$class: 'ChoiceParameter', 
                                choiceType: 'PT_RADIO', 
                                description: 'Verbose output', 
                                filterLength: 1, 
                                filterable: false, 
                                name: 'verbose', 
                                script: [
                                    $class: 'GroovyScript', 
                                    fallbackScript: [
                                    classpath: [], 
                                    sandbox: true, 
                                    script: 
                                        "return['ERROR: Could not get Verbose']"
                                    ], 
                                    script: [
                                    classpath: [], 
                                    sandbox: true, 
                                    script: 
                                        "return['YES','NO:selected']"
                                    ]
                                ]
                            ], 
                            [$class: 'ChoiceParameter', 
                                choiceType: 'PT_RADIO', 
                                description: 'Execute me', 
                                filterLength: 1, 
                                filterable: false, 
                                name: 'EXECUTEME', 
                                script: [
                                    $class: 'GroovyScript', 
                                    fallbackScript: [
                                    classpath: [], 
                                    sandbox: true, 
                                    script: 
                                        "return['ERROR: Could not get EXECUTEME']"
                                    ], 
                                    script: [
                                    classpath: [], 
                                    sandbox: true, 
                                    script: 
                                        "return['YES','NO:selected']"
                                    ]
                                ]
                            ]                            
                        ])
                    ])
                    if (EXECUTEME == "YES") {
                    pwsh '''
                        $PSStyle.OutputRendering = [System.Management.Automation.OutputRendering]::PlainText;
                        . ${env:WORKSPACE}/functions/new-snapshot.ps1
                        . ${env:WORKSPACE}/functions/remove-snapshot.ps1
                        . ${env:WORKSPACE}/functions/get-snapshot.ps1
                        . ${env:WORKSPACE}/functions/get-virtualmachine.ps1
                        $Arguments = @{}
                        if ( $env:RUNMODE -eq "YES" ) {$Arguments["clean"] = $true}
                        if ($env:VMS) {$Arguments["VirtualMachineNames"] = $env:VMS}
                        if ($env:verbose -eq "Yes") {$Arguments["verbose"] = $true}
                        if ($env:snapshotname) { $arguments["SnapshotName"] = $env:snapshotname}
                        write-host "Start.....`n"
                        $result=new-snapshot @arguments
                        $result|out-string
                        write-host "....End"
                    '''
                    } else {
                        println "Execute Flag not set. Done Nothing."
                    }
                }
            }
        }
    }
}